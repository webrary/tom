var ts=ts||{};ts.tom=ts.tom||{},ts.tom.utils=ts.tom.utils||{},ts.tom.utils.string=ts.tom.utils.string||{},ts.tom.utils.string.nthIndexOf=function(t,e,n){"use strict";var o=0,s=-2;for(n=(n=parseInt(n,10))&&n>0?n:1;n>o&&-1!==s;)s=t.indexOf(e,s+1),o++;return s},ts.tom.utils.string.occurrences=function(t,e){"use strict";var n=0,o=-2,s=[];if(e.length<1)return[{nth:Number.POSITIVE_INFINITY,position:Number.POSITIVE_INFINITY},{nth:Number.POSITIVE_INFINITY,position:-1}];for(;-1!==o&&(o=t.indexOf(e,o+1),!(0>o));)s.push({nth:++n,position:o});return s},ts.tom.utils.string.times=function(t,e){"use strict";var n=ts.tom.utils.string.occurrences(t,e),o=n[n.length-1];return o?o.nth:0},ts.tom.utils.string.compact=function(t){"use strict";return t.replace(/\s+/gm,"")},ts.tom.utils.string.trim=function(t){"use strict";return t.replace(/(^\s*)|(\s*$)/g,"")};var ts=ts||{};ts.tom=ts.tom||{},ts.tom.core=ts.tom.core||{},ts.tom.core.Selection=function(t){this.range_=t},ts.tom.core.Selection.prototype.getTextNodes=function(){"use strict";function t(t,e){var n=t.splitText(e);return n.startPosition=t.startPosition+ts.tom.utils.string.compact(t.data).length,n.endPosition=t.endPosition,t.endPosition=n.startPosition-1,n}var e=this.range_.startContainer,n=this.range_.endContainer,o=this.range_.startOffset,s=this.range_.endOffset,r=document.body.data.tNodes,i=r.indexOf(e),a=t(e,o);a.length>0&&r.splice(i+1,0,a),n===e&&(n=a,s-=o);var c=r.indexOf(n),u=t(n,s);return u.length>0&&r.splice(c+1,0,u),r.slice(i+1,c+1)},ts.tom.core.Selection.prototype.getIndex=function(){"use strict";var t=this.range_.endContainer;if(!(t instanceof Text&&this.range_.startContainer instanceof Text))throw new Error("illegal selection");var e=this.range_.endOffset,n=ts.tom.utils.string.compact(t.substringData(0,e)),o=n?n.length:0;if(1>o)throw new Error("illegal selection");var s=ts.tom.utils.string.compact(this.range_.toString());return ts.tom.utils.string.times(document.body.data.tText.substr(0,t.startPosition+o),s)},ts.tom.core.Selection.prototype.getSelection=function(){var t=window.getSelection();return t.rangeCount<1&&t.addRange(this.range_),t},ts.tom.core.Selection.from=function(t,e,n){var o=window.getSelection();if(!t&&o.rangeCount>0)return new ts.tom.core.Selection(window.getSelection().getRangeAt(0));var s=ts.tom.core.Selection.rangeFrom_(t,e);return n&&(o.removeAllRanges(),o.addRange(s)),new ts.tom.core.Selection(s)},ts.tom.core.Selection.rangeFrom_=function(t,e){"use strict";function n(t,e,n){for(var o=0,s=0;e+n>o;s++)/\s+/m.test(t[s])||o++;return s-n}if(t){var o=document.body.data.tText,s=document.body.data.tNodes,r=document.createRange(),i=ts.tom.utils.string.compact(t),a=ts.tom.utils.string.nthIndexOf(o,i,e||1);if(a>-1){for(var c=a+s[0].startPosition,u=c+i.length,l=null,m=null,d=0;d<s.length;d++){var g=s[d];if(!l&&g.endPosition>=c&&(l=s[d]),g.startPosition>=u){m=s[d-1];break}}if(null!==l){m=m||s[s.length-1];var f=n(l.data,c-l.startPosition,1),h=n(m.data,u-m.startPosition,0);r.setStart(l,f),r.setEnd(m,h)}}return r}return document.createRange()},window.addEventListener("load",function(){"use strict";function t(t){function e(t){if(3===t.nodeType&&/\S/.test(t.data))n.push(t);else if(1===t.nodeType&&!o.test(t,null))for(var s=0,r=t.childNodes.length;r>s;++s)e(t.childNodes[s])}var n=[],o={elements:["applet","area","base","basefont","bdo","button","frame","frameset","iframe","head","hr","img","input","link","map","meta","noframes","noscript","optgroup","option","param","script","select","style","textarea","title"],test:function(t,e){var n=e||this.elements;return n.indexOf(t.tagName.toLowerCase())>-1}};return e(t),n}var e=t(document.body),n=0,o="";e.forEach(function(t){t.startPosition=n;var e=ts.tom.utils.string.compact(t.data);o+=e,n+=e.length,t.endPosition=n-1}),document.body.data={tNodes:e,tText:o}});
//# sourceMappingURL=data:application/json;base64,